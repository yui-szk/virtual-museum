name: Notify Discord on Git Events

on:
  pull_request:
    types: [opened, reopened, synchronize, closed]
  pull_request_review:
    types: [submitted]

jobs:
  notify:
    runs-on: ubuntu-latest
    steps:
      - name: Build message for push
        if: github.event_name == 'push'
        run: |
          COMMITS=$(jq -r '.commits[] | "- " + .message + " (" + .id[0:7] + ") by " + .author.username' <<< '${{ toJson(github.event) }}' | head -n 5)
          CONTENT="**[PUSH]** \`${{ github.repository }}\` → **${{ github.ref_name }}** by **${{ github.actor }}**\n${COMMITS}"
          echo "CONTENT=$CONTENT" >> $GITHUB_ENV

      - name: Build message for PR
        if: github.event_name == 'pull_request'
        run: |
          ACTION="${{ github.event.action }}"
          NUMBER=${{ github.event.pull_request.number }}
          TITLE=$(jq -r '.pull_request.title' <<< '${{ toJson(github.event) }}')
          URL=$(jq -r '.pull_request.html_url' <<< '${{ toJson(github.event) }}')
          FROM=$(jq -r '.pull_request.head.ref' <<< '${{ toJson(github.event) }}')
          TO=$(jq -r '.pull_request.base.ref' <<< '${{ toJson(github.event) }}')
          MERGED=$(jq -r '.pull_request.merged' <<< '${{ toJson(github.event) }}')
          if [ "$ACTION" = "closed" ] && [ "$MERGED" = "true" ]; then
            PREFIX="**[PR MERGED]**"
          else
            PREFIX="**[PR ${ACTION^^}]**"
          fi
          CONTENT="${PREFIX} #${NUMBER} **${TITLE}**\n\`${FROM}\` → \`${TO}\`\n${URL}"
          echo "CONTENT=$CONTENT" >> $GITHUB_ENV

      - name: Build message for PR Review
        if: github.event_name == 'pull_request_review'
        run: |
          STATE=$(jq -r '.review.state' <<< '${{ toJson(github.event) }}')
          NUMBER=${{ github.event.pull_request.number }}
          URL=$(jq -r '.review.html_url' <<< '${{ toJson(github.event) }}')
          CONTENT="**[PR REVIEW]** #${NUMBER} → **${STATE^^}** by **${{ github.actor }}**\n${URL}"
          echo "CONTENT=$CONTENT" >> $GITHUB_ENV

      - name: Post to Discord
        env:
          WEBHOOK: ${{ secrets.DISCORD_WEBHOOK_URL }}
          CONTENT: ${{ env.CONTENT }}
        run: |
          # Embedの例（必要なら色やフィールドを足せます）
          jq -n --arg content "$CONTENT" \
            '{content: $content}' \
            > payload.json
          curl -s -H "Content-Type: application/json" \
               -X POST \
               -d @payload.json \
               "$WEBHOOK"